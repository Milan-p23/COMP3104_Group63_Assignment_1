Introduction to COMP 3104 - DevOps:


COMP 3104 focuses on DevOps principles, including continuous integration, delivery, and collaboration between development and operations.


Tools used in DevOps include:
•⁠  ⁠Git for version control
•⁠  ⁠Docker for containerization


A typical DevOps workflow involves:
•⁠  ⁠Continuous Integration (CI): Automating the integration of code into a shared repository.
•⁠  ⁠Continuous Delivery (CD): Automating code deployment.
•⁠  ⁠Continuous Monitoring (CM): Monitoring the application's performance and making adjustments as needed.
•⁠  ⁠Continuous Feedback (CF): Providing feedback to developers on the application's performance.
•⁠  ⁠Continuous Improvement (CI): Improving the application's performance and efficiency.


Example of a DevOps practice:
•⁠  ⁠Automated Testing: Running automated tests as part of the CI pipeline to ensure code quality.
•⁠  ⁠Automated Deployment: Using tools like Ansible or Terraform to automate the deployment of code to production.
•⁠  ⁠Monitoring and Logging: Using tools like Prometheus or ELK to monitor and log application performance.
•⁠  ⁠Feedback and Improvement: Using tools like JIRA or Trello to track and prioritize feedback and improvement
•⁠  ⁠Collaboration: Using tools like Slack or Microsoft Teams to facilitate communication between teams.


Key DevOps principles include:
•⁠  ⁠Collaboration: Developers and operations teams work together to solve issues.
•⁠  ⁠Automation: Repetitive tasks like testing and deployment are automated.
•⁠  ⁠Continuous Improvement: The application is continuously improved and updated.
•⁠  ⁠Feedback: Feedback is provided to developers on the application's performance.
•⁠  ⁠Monitoring: The application's performance is continuously monitored.
•⁠  ⁠Security: Security is a top priority in DevOps.

In COMP 3104, students learn how to implement CI/CD pipelines using tools like Jenkins and GitHub Actions.
They also learn about containerization using Docker and Kubernetes.
Additionally, students learn about monitoring and logging using tools like Prometheus and ELK.
The course covers various DevOps tools and practices, including automated testing, automated deployment, and feedback and
improvement.


DevOps practices allow developers to ship reliable software faster, making it a crucial skill for modern developers.
By understanding DevOps principles and practices, developers can improve collaboration, automation, continuous improvement, feedback,
monitoring, and security in their software development process.
In COMP 3104, students gain hands-on experience with DevOps tools and practices, preparing them
for a career in software development and deployment.

DevOps culture promotes continuous improvement, ensuring that software evolves to meet user needs quickly.
It encourages collaboration between teams, fostering a culture of open communication and shared goals.
DevOps practices also emphasize automation, reducing the risk of human error and increasing efficiency.
By adopting DevOps principles, organizations can improve their software development and deployment processes, leading to faster time
to market and increased customer satisfaction.

DevOps is an essential methodology for developers to learn, providing tools and processes that streamline software delivery.
By mastering DevOps, developers can improve collaboration, automation, continuous improvement, feedback, monitoring, and
security in their software development process.
In COMP 3104, students gain practical experience with DevOps tools and practices, preparing them for
a career in software development and deployment.